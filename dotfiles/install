#!/bin/bash

sudo -v

echo "=== Dotfile and fresh machine setup by Matt W. ==="
echo -e "\
	Warning!\n \
	This script will update packages and overwrite your dotfiles, configuration files, SSH keys and more.\n \
	Make a backup before running!"

read -p "Are you sure you want to continue? (y/n) " -n 1 -r
echo

if ! echo "$REPLY" | egrep -q "^[Yy]$"; then
	exit 0
fi

export DEBIAN_FRONTEND=noninteractive 

# Update packages
echo "== Updating packages =="
sudo apt -y install software-properties-common
sudo add-apt-repository -y ppa:neovim-ppa/unstable
sudo add-apt-repository -y multiverse
sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
sudo add-apt-repository -y ppa:wslutilities/wslu
sudo add-apt-repository -y ppa:dotnet/backports
sudo apt update
sudo apt -y upgrade
sudo apt autoremove
sudo apt autoclean

# Install packages
echo "== Installing new packages =="
sudo apt -y install \
	coreutils \
	curl \
	wget \
	tree \
	tmux \
	tcpdump \
	tar \
	zip \
	vim \
	nmap \
	neofetch \
	software-properties-common \
	source-highlight \
	less \
	jq \
	ca-certificates \
	dos2unix \
	net-tools \
	figlet \
	cowsay \
	xclip \
	git \
	bash-completion \
	xdg-utils \
	silversearcher-ag \
	python3 \
	python3-pip \
	python3-venv \
	wslu \
	ranger \
	ffmpeg \
	sqlite3 \
	neovim \
	bat \
	xsel \
	ttf-mscorefonts-installer \
	make \
	cmake \
	ninja-build \
	g++-14 \
	gdb \
	uidmap \
	xfsprogs \
	cloc \
	apache2-utils \
	zsh \
	qrencode \
	keynav \
	httrack \
	tshark \
	trash-cli \
	dotnet-sdk-9.0

sudo -v

# Install Oh My Zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

# Install zsh common theme
zsh -i -c "wget -O \$ZSH_CUSTOM/themes/common.zsh-theme https://raw.githubusercontent.com/jackharrisonsherlock/common/master/common.zsh-theme"

# Install Oh My Zsh plugins
zsh -i -c "git clone https://github.com/jeffreytse/zsh-vi-mode \$ZSH_CUSTOM/plugins/zsh-vi-mode"

sudo -v

# Node, package managers and global packages
echo "== Installing Node and other package managers =="
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
nvm install --lts
npm install -g \
	npm@latest \
	pnpm \
	yarn \
	tsx \
	open-cli \
	markserv \
	lorem-ipsum \
	@angular/cli \
	graphql-language-service-cli \
	typescript-language-server

sudo -v

# Install Golang
echo "== Installing Golang =="
wget https://go.dev/dl/go1.24.2.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.24.2.linux-amd64.tar.gz
rm go1.24.2.linux-amd64.tar.gz

# Vim plugin manager for NeoVim
echo "== Installing NeoVim plugin manager =="
curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim \
	--create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

sudo -v

# NeoVim plugin install without opening interactively
echo "== Installing NeoVim plugins =="
DISPLAY= python3 -v -m pip install --user --upgrade pynvim
nvim +'PlugInstall --sync' +qa

sudo -v

# Install Rust
echo "== Installing Rust =="
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
source $HOME/.cargo/env

sudo -v

# Install tmux plugin manager
echo "== Installing tmux plugin manager =="
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
tmux source ~/.tmux.conf
~/.tmux/plugins/tpm/bin/install_plugins

# Install fzf
echo "== Installing fzf =="
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && \
~/.fzf/install --all

# Install ChatGPT CLI
echo "== Installing ChatGPT CLI =="
curl -L -o chatgpt https://github.com/kardolus/chatgpt-cli/releases/latest/download/chatgpt-linux-amd64 && \
	chmod +x chatgpt && \
	sudo mv chatgpt /usr/local/bin/

# Install htmlq
cargo install htmlq

# Install yq
echo "== Installing yq =="
wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && \
	chmod +x /usr/bin/yq

# Link batcat binary to bat
echo "== Symlinking bat binary to proper path =="
sudo ln -s $(which batcat) /usr/bin/bat

# Install ripgrep without conflicts with bat
echo "== Installing ripgrep without conflicts =="
sudo apt-get download ripgrep
sudo dpkg --force-overwrite -i ripgrep*.deb
rm ripgrep*.deb

# Symlink the latest g++ executable
echo "== Symlinking g++ to latest version =="
sudo ln -sf $(which g++-14) $(which g++)

# Update font cache to use Microsoft fonts
sudo fc-cache -f

# Docker completions
if command -v docker &> /dev/null; then
	mkdir -p ~/.oh-my-zsh/completions
	docker completion zsh > ~/.oh-my-zsh/completions/_docker
fi

# Generate local SSH keys
echo "== Generating SSH keys =="
ssh-keygen -q -N "" -t ed25519 -a 100 -f ~/.ssh/id_ed25519 <<< "n" > /dev/null

sudo -v

# Dotfiles, configuration files and scripts
echo "== Fetching dotfiles and scripts =="
curl -sL https://raw.githubusercontent.com/MatthewWid/dotfiles/refs/heads/master/dotfiles/sync | bash -s -- fetch
touch ~/.hushlogin

# Set zsh as default shell
chsh -s $(which zsh)

echo "== Done! =="
